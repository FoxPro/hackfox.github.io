*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="thrmomtr.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS ctlcontrol AS control 
 	*< CLASSDATA: Baseclass="control" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "ctlcontrol"

ENDDEFINE

DEFINE CLASS lbllabel AS label 
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	Caption = "Label1"
	Height = 18
	Name = "lbllabel"
	Width = 43

ENDDEFINE

DEFINE CLASS lblpercent AS lbllabel OF "thrmomtr.vcx" 
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	AutoSize = .T.
	BackStyle = 0
	Caption = "0%"
	Height = 18
	Name = "lblpercent"
	Width = 17

ENDDEFINE

DEFINE CLASS shpmercury AS shpshape OF "thrmomtr.vcx" 
 	*< CLASSDATA: Baseclass="shape" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: redraw		&& Redisplay the shape of the mercury with passed parameters of Top, Left, Height and Width
	*</DefinedPropArrayMethod>

	FillStyle = 0
	Height = 37
	Name = "shpmercury"
	SpecialEffect = 0
	Width = 0
	
	PROCEDURE redraw		&& Redisplay the shape of the mercury with passed parameters of Top, Left, Height and Width
		lParameters nTop, nLeft, nHeight, nWidth
		This.Top = nTop
		This.Left = nLeft
		This.Height = nHeight
		This.Width = nWidth
	ENDPROC

ENDDEFINE

DEFINE CLASS shpshape AS shape 
 	*< CLASSDATA: Baseclass="shape" Timestamp="" Scale="Pixels" Uniqueid="" />

	Height = 68
	Name = "shpshape"
	Width = 68

ENDDEFINE

DEFINE CLASS shpthermframe AS shpshape OF "thrmomtr.vcx" 
 	*< CLASSDATA: Baseclass="shape" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: redraw		&& Redisplay the frame
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 2
	Height = 37
	Name = "shpthermframe"
	SpecialEffect = 0
	Width = 205
	
	PROCEDURE redraw		&& Redisplay the frame
		lparameters nHeight, nWidth
		this.Height = nHeight
		this.Width = nWidth
	ENDPROC

ENDDEFINE

DEFINE CLASS thermometer AS control 		&& Thermometer Control
 	*< CLASSDATA: Baseclass="control" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Shpthermframe1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Shpmercury1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblComplete" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: updatemercury		&& Redraws the fill-in mercury shape. Called by UpdatePct()
		*m: updatepct		&& Method called by external objects with a parameter to update the percentage complete
		*m: updatetext		&& Redisplays the label on the thermometer. Called by UpdatePct()
		*p: framewidth		&& Size of the frame around the thermometer
		*p: interval		&& Percent change which will cause Mercury to be re-drawn. Zero causes continual refesh. Default to one.
		*p: mercurycolor		&& Color Property for a sincle-color thermometer fill. Use DynamicMercuryColor for changing colors.
		*p: noldpercent		&& Percentage last used to update the thermometer's shape and text. Used to test if (Interval) has passed for updating.
		*p: npctcomplete		&& Percentage Complete to be displayed
		*p: orientation		&& Property which determines if mercury fills from bottom to top or left to right
	*</DefinedPropArrayMethod>

	PROTECTED noldpercent,npctcomplete
	BorderWidth = 2
	Comment = "Custom control to display percent complete upon receiving UpdatePct() custom method message"
	framewidth = 1		&& Size of the frame around the thermometer
	Height = 49
	interval = (1)		&& Percent change which will cause Mercury to be re-drawn. Zero causes continual refesh. Default to one.
	mercurycolor = 255		&& Color Property for a sincle-color thermometer fill. Use DynamicMercuryColor for changing colors.
	Name = "thermometer"
	noldpercent = (1)		&& Percentage last used to update the thermometer's shape and text. Used to test if (Interval) has passed for updating.
	npctcomplete = (1)		&& Percentage Complete to be displayed
	orientation = (0)		&& Property which determines if mercury fills from bottom to top or left to right
	Width = 205

	ADD OBJECT 'lblComplete' AS lblpercent WITH ;
		Left = 90, ;
		Name = "lblComplete", ;
		Top = 7, ;
		Visible = .T.
		*< END OBJECT: ClassLib="thrmomtr.vcx" BaseClass="label" />

	ADD OBJECT 'Shpmercury1' AS shpmercury WITH ;
		BorderWidth = 0, ;
		Left = 0, ;
		Name = "Shpmercury1", ;
		Top = 0, ;
		Visible = .T.
		*< END OBJECT: ClassLib="thrmomtr.vcx" BaseClass="shape" />

	ADD OBJECT 'Shpthermframe1' AS shpthermframe WITH ;
		Left = 0, ;
		Name = "Shpthermframe1", ;
		Top = 0, ;
		Visible = .T.
		*< END OBJECT: ClassLib="thrmomtr.vcx" BaseClass="shape" />
	
	PROCEDURE Init
		* Store an inital 1 percent, because
		* 3-d shapes do funny things with zero widths
		this.nPctComplete = 1
		
		* But we want the oldpercent to increment each "intervalth"
		* amount (i.e., 5,10,15,... or 2,4,6,...) so it starts at zero
		this.nOldPercent = 0
		
		* Size the frame to the size of the control on the form
		this.shpThermframe1.Height=this.Height
		this.shpThermFrame1.Width=this.Width
		this.shpThermFrame1.BorderWidth=this.FrameWidth
		
		* Size the Mercury to fit within the borders of the frame
		this.shpMercury1.Left=this.shpThermFrame1.BorderWidth
		this.shpMercury1.FillColor=this.MercuryColor
		do case
		  case this.Orientation = 0  && default left-to-right
		    this.shpMercury1.Top=this.shpThermFrame1.BorderWidth
		    this.shpMercury1.Height=this.height - ;
		      2*this.shpThermFrame1.Borderwidth
		  case this.Orientation = 1  && bottom-to-top fill
		    this.shpMercury1.Top=this.Height - ;
		           2 * this.shpThermFrame1.BorderWidth
		    this.shpMercury1.Height = 1
		    this.shpMercury1.Width=this.Width - ;
		        2*this.shpThermFrame1.Borderwidth
		  case this.Orientation = 99 && top-to-bottom "drain" effect
		    this.shpMercury1.Top = this.shpThermFrame1.BorderWidth
		      *  + ;
		        (this.Height-2*this.shpThermFrame1.BorderWidth)
		    this.shpMercury1.Height = (this.Height-this.shpThermFrame1.BorderWidth) - ;
		      - this.shpMercury1.Top
		    this.shpMercury1.Width=this.Width - ;
		        2*this.shpThermFrame1.Borderwidth
		  otherwise
		    && unacceptable property value
		    error 1560
		endcase  
		
		* Center the label horizontally & vertically
		this.lblComplete.Left=(this.Width-this.lblComplete.Width)/2
		this.lblComplete.Top=(this.Height-this.lblComplete.Height)/2
	ENDPROC

	PROTECTED PROCEDURE updatemercury		&& Redraws the fill-in mercury shape. Called by UpdatePct()
		* Resize the mercury to show the new complete percentage
		
		do case
		  case this.Orientation = 0  && default left-to-right
		    this.shpMercury1.Width=(this.nPctComplete/100) * ;
		    (this.width-2*this.shpThermFrame1.BorderWidth)
		    
		  case this.Orientation = 1  && bottom-to-top
		    this.shpMercury1.Top = this.shpThermFrame1.BorderWidth + ;
		      ((100-this.nPctComplete)/100) * ;
		      (this.Height-2*this.shpThermFrame1.BorderWidth)
		    this.shpMercury1.Height = (this.Height - this.shpThermFrame1.BorderWidth) - ;
		      this.shpMercury1.Top
		
		  case this.Orientation = 99  && top-to-bottom "drain" effect
		    this.shpMercury1.Top = this.shpThermFrame1.BorderWidth + ;
		      (this.nPctComplete/100) * ;
		      (this.Height-2*this.shpThermFrame1.BorderWidth)
		    this.shpMercury1.Height = (this.Height-this.shpThermFrame1.BorderWidth) - ;
		      - this.shpMercury1.Top
		  otherwise
		      error 1560
		endcase
		
	ENDPROC

	PROCEDURE updatepct		&& Method called by external objects with a parameter to update the percentage complete
		lparameters nPctComplete
		this.nPctComplete = nPctComplete
		
		* redisplay text and shape if "Interval" is exceeded
		if this.nPctComplete >= this.nOldPercent + this.Interval or ;
		   this.nPctComplete <= this.nOldPercent - this.Interval or ;
		   this.nPctComplete = 100
		  this.UpdateText()  && re-display text 
		  this.UpdateMercury()    && re-display mercury
		  this.nOldPercent = this.nPctComplete
		endif
		
	ENDPROC

	PROTECTED PROCEDURE updatetext		&& Redisplays the label on the thermometer. Called by UpdatePct()
		* Refresh the "percent complete" text
		this.lblComplete.Caption=transform(this.nPctComplete,"@R 999%")
		this.lblComplete.Left=(this.width-this.lblComplete.Width)/2
	ENDPROC

ENDDEFINE
