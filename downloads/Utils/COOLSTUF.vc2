*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="coolstuf.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS arraymover AS sortmoverlists OF "coolstuf.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="f:\vfp\samples\controls\moverbox.bmp" ClassIcon="f:\vfp\samples\controls\moverbox.bmp" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cmdOk" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: coutname		&& Name of Output Array
		*p: releaseonok		&& Determines whether clicking the OK button releases the containing form as well as filling the specified array.
	*</DefinedPropArrayMethod>

	Height = 175
	Name = "arraymover"
	Width = 410
	cmdAdd.Height = 25
	cmdAdd.Left = 186
	cmdAdd.Name = "cmdAdd"
	cmdAdd.Top = 2
	cmdAdd.Width = 37
	cmdAddAll.Height = 25
	cmdAddAll.Left = 186
	cmdAddAll.Name = "cmdAddAll"
	cmdAddAll.Top = 31
	cmdAddAll.Width = 37
	cmdRemove.Height = 25
	cmdRemove.Left = 186
	cmdRemove.Name = "cmdRemove"
	cmdRemove.Top = 72
	cmdRemove.Width = 37
	cmdRemoveAll.Height = 25
	cmdRemoveAll.Left = 186
	cmdRemoveAll.Name = "cmdRemoveAll"
	cmdRemoveAll.Top = 102
	cmdRemoveAll.Width = 37
	lstSelected.Height = 132
	lstSelected.Left = 240
	lstSelected.Name = "lstSelected"
	lstSelected.Top = 0
	lstSelected.Width = 169
	lstSource.Height = 132
	lstSource.Left = 0
	lstSource.Name = "lstSource"
	lstSource.Top = 0
	lstSource.Width = 169

	ADD OBJECT 'cmdOk' AS commandbutton WITH ;
		Caption = "OK", ;
		Height = 29, ;
		Left = 168, ;
		Name = "cmdOk", ;
		Top = 144, ;
		Width = 73
		*< END OBJECT: BaseClass="commandbutton" />
	
	PROCEDURE initmover
		LPARAMETERS aInList, cArrayOutList, lReleaseOnOK, ;
		            lSortSource, lSortSelected, lUseMovers
		LOCAL nCnt
		
		* Check params
		IF TYPE("aInList[1]")="U" OR TYPE("cArrayOutList")<>"C"
			* Required params are no good, so bail out
			* Return .F. so Init of containing form can give up
			RETURN .F.
		ENDIF
		
		* Move items from aInList into left-hand list
		FOR nCnt = 1 TO ALEN(aInList,1)
			THIS.lstSource.AddItem(aInList[nCnt])
		ENDFOR
		
		* Store other properties
		THIS.cOutName = cArrayOutList
		
		IF TYPE("lReleaseOnOK")="L"
			THIS.ReleaseOnOK = lReleaseOnOk
		ELSE
			THIS.ReleaseOnOK=.F.
		ENDIF
		
		SortMoverLists::InitMover(lSortSource,lSortSelected,lUseMovers)
	ENDPROC

	PROCEDURE cmdOk.Click
		* Copy selected items into specifed output array
		LOCAL nCnt,cArrayName
		
		cArrayName = THIS.PARENT.cOutName
		DIMENSION &cArrayname[THIS.PARENT.lstSelected.ListCount]
		FOR nCnt = 1 TO THIS.PARENT.lstSelected.ListCount
			&cArrayName[nCnt] = THIS.PARENT.lstSelected.List[nCnt]
		ENDFOR
		
		IF THIS.Parent.ReleaseOnOK
			THISFORM.Release
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS catmover AS sortmoverlists OF "coolstuf.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="f:\vfp\samples\controls\moverbox.bmp" ClassIcon="f:\vfp\samples\controls\moverbox.bmp" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="cboCategories" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*p: categoryalias		&& Alias of table containing category list
		*p: categorydesc		&& Field of category table containing category description
		*p: categoryid		&& Field of category table containing category id
		*p: itemalias		&& Alias of table containing items
		*p: itemcatid		&& Field of item table containing category id
		*p: itemdesc		&& Field of item table containing item description
		*p: itemid		&& Field in Items table containing item's id
	*</DefinedPropArrayMethod>

	Height = 186
	Name = "catmover"
	Width = 410
	cmdAdd.Height = 25
	cmdAdd.Left = 187
	cmdAdd.Name = "cmdAdd"
	cmdAdd.Top = 57
	cmdAdd.Width = 37
	cmdAddAll.Height = 25
	cmdAddAll.Left = 187
	cmdAddAll.Name = "cmdAddAll"
	cmdAddAll.Top = 86
	cmdAddAll.Width = 37
	cmdRemove.Height = 25
	cmdRemove.Left = 187
	cmdRemove.Name = "cmdRemove"
	cmdRemove.Top = 128
	cmdRemove.Width = 37
	cmdRemoveAll.Height = 25
	cmdRemoveAll.Left = 187
	cmdRemoveAll.Name = "cmdRemoveAll"
	cmdRemoveAll.Top = 158
	cmdRemoveAll.Width = 37
	lstSelected.Height = 132
	lstSelected.Left = 241
	lstSelected.Name = "lstSelected"
	lstSelected.Top = 55
	lstSelected.Width = 169
	lstSource.Height = 132
	lstSource.Left = 1
	lstSource.Name = "lstSource"
	lstSource.Top = 55
	lstSource.Width = 169

	ADD OBJECT 'cboCategories' AS combobox WITH ;
		Height = 24, ;
		Left = 0, ;
		Name = "cboCategories", ;
		Style = 2, ;
		Top = 16, ;
		Value = 1, ;
		Width = 169
		*< END OBJECT: BaseClass="combobox" />
	
	PROCEDURE initmover
		LPARAMETERS cCategoryAlias,cItemAlias,cCatDesc,cCatId, ;
		            cItemDesc,cItemCatId,cItemId, ;
		            lSortSource,lSortSelected,lUseMovers
		* cCategoryAlias = Alias for table containing categories
		* cItemAlias = Alias for table containing items
		* cCatDesc = Name of field in category table containing description. 
		* cCatid = Name of field in category table containing category id
		* cItemDesc = Name of field in item table containing description
		* cItemCatId = Name of field in item table containing category id
		* cItemId = Name of field in item table containing item id
		* lSortSource = Determines whether source item list should be sorted
		* lSortSelected = Determines whether selected item list should be sorted
		* lUseMovers = Determines whether selected item list should include moverbars            
		
		* Check for valid parameters - first, right number and type
		IF PCOUNT()<7 OR TYPE("cCategoryAlias")<>"C" OR TYPE("cItemAlias")<>"C" ;
		   OR TYPE("cCatDesc")<>"C" OR TYPE("cCatId")<>"C" ;
		   OR TYPE("cItemDesc")<>"C" OR TYPE("cItemCatId")<>"C" ;
		   OR TYPE("cItemId")<>"C"
			* Can't do it. Return .F. Since this routine
			* should be called by Init of containing form, form can abort
			RETURN .F.
		ENDIF
		
		* Now check that parameters are valid in context
		IF NOT USED(cCategoryAlias) OR NOT USED(cItemAlias)
			* One of the tables isn't open, so bail out
			RETURN .F.
		ENDIF
		
		IF TYPE("&cCategoryAlias..&cCatDesc")="U" OR ;
		   TYPE("&cCategoryAlias..&cCatId")="U" OR ;
		   TYPE("&cItemAlias..&cItemDesc")="U" OR ;
		   TYPE("&cItemAlias..&cItemCatId")="U" OR ;
		   TYPE("&cItemAlias..&cItemId")="U"
		   * One of the fields doesn't exist
		   	RETURN .F.
		ENDIF
		
		* Store parameters to properties
		THIS.CategoryAlias = cCategoryAlias
		THIS.ItemAlias = cItemAlias
		THIS.CategoryDesc = cCatDesc
		THIS.CategoryId = cCatId
		THIS.ItemDesc = cItemDesc
		THIS.ItemCatId = cItemCatId
		THIS.ItemId = cItemId
		
		* Now set up category and item lists
		SELECT (cCategoryAlias)
		SCAN
			THIS.cboCategories.AddItem(&cCatDesc)
			THIS.cboCategories.AddListItem(&cCatId,THIS.cboCategories.NewItemId,2)
		ENDSCAN
		THIS.cboCategories.DisplayValue = THIS.cboCategories.List[1,1]
		
		LOCAL cCurCat
		cCurCat = THIS.cboCategories.List[1,2]
		SELECT (cItemAlias)
		SCAN
			IF &cItemCatId = cCurCat
				THIS.lstSource.AddItem(&cItemDesc)
				THIS.lstSource.AddListItem(&cItemCatId,THIS.lstSource.NewItemId,2)
				THIS.lstSource.AddListItem(&cItemId,THIS.lstSource.NewItemId,3)
			ENDIF
		ENDSCAN
		
		SortMoverLists::InitMover(lSortSource,lSortSelected,lUseMovers)
	ENDPROC

	PROCEDURE cboCategories.InteractiveChange
		* Change the source list to match the current category
		THISFORM.LockScreen = .T.
		THIS.Parent.lstSource.Clear()
		
		* Scan list and match to current category
		LOCAL cCurCat,cItemCatId,cItemDesc,cItemId
		cCurCat = THIS.List[THIS.ListIndex,2]
		cItemCatId = THIS.Parent.ItemCatId
		cItemDesc = THIS.Parent.ItemDesc
		cItemId = THIS.Parent.ItemId
		
		SELECT (THIS.Parent.ItemAlias)
		SCAN
			* Add it only if it's in the current category and
			* not already selected
			IF &cItemCatId = cCurCat 
				LOCAL lFound,nCnt
				nCnt=1
				lFound = .F.
				DO WHILE nCnt<=THIS.Parent.lstSelected.ListCount AND NOT lFound
					IF THIS.Parent.lstSelected.List[nCnt,3]==&cItemId
						lFound = .T.
					ELSE
						nCnt=nCnt+1
					ENDIF
				ENDDO
				IF NOT lFound
					WITH THIS.Parent.lstSource
						.AddItem(&cItemDesc)
						.AddListItem(&cItemCatId,.NewItemId,2)
						.AddListItem(&cItemId,.NewItemId,3)
					ENDWITH
				ENDIF
			ENDIF
		ENDSCAN
			
		THISFORM.LockScreen = .F.
	ENDPROC

	PROCEDURE cmdAdd.Click
		THISFORM.LockScreen = .T.
		* The ListCount value changes whenever the RemoveItem method is called
		nCnt = 1
		DO WHILE nCnt <= THIS.Parent.lstSource.ListCount
			IF THIS.Parent.lstSource.Selected(nCnt)
				THIS.Parent.lstSelected.AddItem(THIS.Parent.lstSource.List(nCnt,1))
				THIS.Parent.lstSelected.AddListItem(THIS.Parent.lstSource.List(nCnt,2), ;
													THIS.Parent.lstSelected.NewItemId,2)
				THIS.Parent.lstSelected.AddListItem(THIS.Parent.lstSource.List(nCnt,3), ;
													THIS.Parent.lstSelected.NewItemId,3)
				THIS.Parent.lstSource.RemoveItem(nCnt)
			ELSE
				nCnt = nCnt + 1
			ENDIF
		ENDDO
		THISFORM.LockScreen = .F.
	ENDPROC

	PROCEDURE cmdAddAll.Click
		THISFORM.LockScreen = .T.
		FOR i = 1 to THIS.Parent.lstSource.ListCount
			THIS.Parent.lstSelected.AddItem(THIS.Parent.lstSource.List(i,1))
			THIS.Parent.lstSelected.AddListItem(THIS.Parent.lstSource.List(i,2),THIS.Parent.lstSelected.NewItemId,2)
			THIS.Parent.lstSelected.AddListItem(THIS.Parent.lstSource.List(i,3),THIS.Parent.lstSelected.NewItemId,3)
		ENDFOR
		THIS.Parent.lstSource.Clear
		THISFORM.LockScreen = .F.
	ENDPROC

	PROCEDURE cmdRemove.Click
		THISFORM.LockScreen = .T.
		nCnt = 1
		DO WHILE nCnt <= THIS.Parent.lstSelected.ListCount
			IF THIS.Parent.lstSelected.Selected(nCnt)
			    IF THIS.Parent.lstSelected.List[nCnt,2]= ;
			       THIS.Parent.cboCategories.List[THIS.Parent.cboCategories.Value,2]
					THIS.Parent.lstSource.AddItem(THIS.Parent.lstSelected.List(nCnt,1))
					THIS.Parent.lstSource.AddListItem(THIS.Parent.lstSelected.List(nCnt,2), ;
					  								  THIS.Parent.lstSelected.NewItemId,2)
					THIS.Parent.lstSource.AddListItem(THIS.Parent.lstSelected.List(nCnt,3), ;
													  THIS.Parent.lstSelected.NewItemId,3)
				ENDIF
				THIS.Parent.lstSelected.RemoveItem(nCnt)
			ELSE
				nCnt = nCnt + 1
			ENDIF
		ENDDO
		THISFORM.LockScreen = .F.
	ENDPROC

	PROCEDURE cmdRemoveAll.Click
		THISFORM.LockScreen = .T.
		FOR i = 1 to THIS.Parent.lstSelected.ListCount
			IF THIS.Parent.lstSelected.List[i,2]= ;
			   THIS.Parent.cboCategories.List[THIS.Parent.cboCategories.Value,2]
				WITH THIS.Parent.lstSource
					.AddItem(THIS.Parent.lstSelected.List(i,1))
					.AddListItem(THIS.Parent.lstSelected.List(i,2),.NewItemId,2)
					.AddListItem(THIS.Parent.lstSelected.List(i,1),.NewItemId,3)
				ENDWITH
			ENDIF
		ENDFOR
		THIS.Parent.lstSelected.Clear
		THISFORM.LockScreen = .F.
	ENDPROC

	PROCEDURE lstSelected.DblClick
		THIS.Parent.cmdRemove.Click()
	ENDPROC

	PROCEDURE lstSource.DblClick
		THIS.Parent.cmdAdd.Click()
	ENDPROC

ENDDEFINE

DEFINE CLASS datespin AS container 		&& Three individual spinners are combined to provide an American style date.
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="f:\vfp\samples\graphics\bmps\fox\psspin.bmp" ClassIcon="f:\vfp\samples\graphics\bmps\fox\psspin.bmp" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnMonths" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnDays" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="spnYears" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label2" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: fixdays		&& Update bounds of day spinner to match current month and year
		*m: getdate		&& Return current date
		*m: leapyear		&& Returns .T. if specified year is a leap year
		*p: nday		&& Currently Chosen Day
		*p: nmonth		&& Currently chosen month
		*p: nyear		&& Currently Chosen Year
		*p: value		&& Contain the date currently displayed
	*</DefinedPropArrayMethod>

	BackStyle = 0
	BorderWidth = 1
	Height = 33
	Name = "datespin"
	nday = (day(date()))		&& Currently Chosen Day
	nmonth = (month(date()))		&& Currently chosen month
	nyear = (year(date()))		&& Currently Chosen Year
	Width = 181

	ADD OBJECT 'Label1' AS label WITH ;
		BackStyle = 0, ;
		Caption = "/", ;
		Comment = "/", ;
		FontBold = .F., ;
		FontSize = 24, ;
		Height = 18, ;
		Left = 50, ;
		Name = "Label1", ;
		Top = 5, ;
		Width = 13
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'Label2' AS label WITH ;
		BackStyle = 0, ;
		Caption = "/", ;
		Comment = "/", ;
		FontBold = .F., ;
		FontSize = 24, ;
		Height = 18, ;
		Left = 103, ;
		Name = "Label2", ;
		Top = 5, ;
		Width = 13
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'spnDays' AS spinner WITH ;
		Alignment = 2, ;
		Format = "K", ;
		Height = 24, ;
		InputMask = "99", ;
		KeyboardHighValue = 31, ;
		KeyboardLowValue = 1, ;
		Left = 59, ;
		Name = "spnDays", ;
		SpinnerHighValue = 31.00, ;
		SpinnerLowValue = 1.00, ;
		Top = 5, ;
		Width = 47
		*< END OBJECT: BaseClass="spinner" />

	ADD OBJECT 'spnMonths' AS spinner WITH ;
		Format = "K", ;
		Height = 24, ;
		InputMask = "99", ;
		KeyboardHighValue = 12, ;
		KeyboardLowValue = 1, ;
		Left = 7, ;
		Name = "spnMonths", ;
		SpinnerHighValue = 12.00, ;
		SpinnerLowValue = 1.00, ;
		Top = 5, ;
		Width = 45
		*< END OBJECT: BaseClass="spinner" />

	ADD OBJECT 'spnYears' AS spinner WITH ;
		Format = "K", ;
		Height = 24, ;
		InputMask = "9999", ;
		KeyboardHighValue = 2099, ;
		KeyboardLowValue = 1582, ;
		Left = 113, ;
		Name = "spnYears", ;
		SpinnerHighValue = 2099.00, ;
		SpinnerLowValue = 1582.00, ;
		Top = 5, ;
		Width = 60
		*< END OBJECT: BaseClass="spinner" />
	
	PROCEDURE fixdays		&& Update bounds of day spinner to match current month and year
		DO CASE
		CASE INLIST(THIS.nMonth,1,3,5,7,8,10,12)
			THIS.spnDays.SpinnerHighValue=31
			THIS.spnDays.KeyboardHighValue=31
		CASE INLIST(THIS.nMonth,4,6,9,11)
			THIS.spnDays.SpinnerHighValue=30
			THIS.spnDays.KeyboardHighValue=30
		CASE THIS.nMonth=2
			IF THIS.LeapYear(THIS.nYear)
				THIS.spnDays.SpinnerHighValue=29
				THIS.spnDays.KeyboardHighValue=29
			ELSE
				THIS.spnDays.SpinnerHighValue=28
				THIS.spnDays.KeyboardHighValue=28
			ENDIF
		ENDCASE
		
		IF THIS.nDay>THIS.spnDays.SpinnerHighValue
			THIS.nDay=THIS.spnDays.SpinnerHighValue
			THIS.spnDays.Value = THIS.nDay
		ENDIF
	ENDPROC

	PROCEDURE getdate		&& Return current date
		* Return the currently displayed date
		RETURN CTOD(STR(THIS.nMonth,2)+"/"+ ;
		            STR(THIS.nDay,2)+"/"+ ;
		            STR(THIS.nYear,4))
	ENDPROC

	PROCEDURE Init
		THIS.spnMonths.ControlSource="THIS.PARENT.nMonth"
		THIS.spnDays.ControlSource="THIS.PARENT.nDay"
		THIS.spnYears.ControlSource="THIS.PARENT.nYear"
		THIS.Refresh()
		This.FixDays()
		THIS.Value = THIS.GetDate()
	ENDPROC

	PROTECTED PROCEDURE leapyear		&& Returns .T. if specified year is a leap year
		LPARAMETER nWhatYear
		LOCAL lRetVal
		
		DO CASE
		CASE MOD(nWhatYear,4)<>0
			lRetVal=.F.
		CASE MOD(nWhatYear,400)=0
			lRetVal=.T.	
		CASE MOD(nWhatYear,100)=0
			lRetVal=.F.
		OTHERWISE	&& Divisible by 4 but not 100
			lRetVal=.T.
		ENDCASE
		
		RETURN lRetVal
	ENDPROC

	PROCEDURE spnDays.InteractiveChange
		THIS.Parent.nDay = THIS.Value
		THIS.Parent.Value = THIS.Parent.GetDate()
	ENDPROC

	PROCEDURE spnMonths.InteractiveChange
		THIS.Parent.nMonth = THIS.Value
		THIS.PARENT.FixDays()
		THIS.Parent.Value = THIS.Parent.GetDate()
	ENDPROC

	PROCEDURE spnMonths.LostFocus
		* update day spinner bounds to match current month
		*THIS.PARENT.FixDays()
		
		
	ENDPROC

	PROCEDURE spnYears.InteractiveChange
		THIS.Parent.nYear = THIS.Value
		THIS.PARENT.FixDays()
		THIS.Parent.Value = THIS.Parent.GetDate()
	ENDPROC

	PROCEDURE spnYears.LostFocus
		* update Days Spinner
		*THIS.PARENT.FixDays()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS sortmoverlists AS moverlists OF "..\..\..\..\..\fox\vfp7\samples\classes\samples.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" ProjectClassIcon="f:\vfp\samples\controls\moverbox.bmp" ClassIcon="f:\vfp\samples\controls\moverbox.bmp" />

	*<DefinedPropArrayMethod>
		*m: initmover		&& Perform initialization for the mover. This is done here instead of Init so params can be passed to form.
	*</DefinedPropArrayMethod>

	Height = 132
	Name = "sortmoverlists"
	Width = 409
	cmdAdd.Height = 25
	cmdAdd.Left = 186
	cmdAdd.Name = "cmdAdd"
	cmdAdd.Top = 2
	cmdAdd.Width = 37
	cmdAddAll.Height = 25
	cmdAddAll.Left = 186
	cmdAddAll.Name = "cmdAddAll"
	cmdAddAll.Top = 31
	cmdAddAll.Width = 37
	cmdRemove.Height = 25
	cmdRemove.Left = 186
	cmdRemove.Name = "cmdRemove"
	cmdRemove.Top = 72
	cmdRemove.Width = 37
	cmdRemoveAll.Height = 25
	cmdRemoveAll.Left = 186
	cmdRemoveAll.Name = "cmdRemoveAll"
	cmdRemoveAll.Top = 102
	cmdRemoveAll.Width = 37
	lstSelected.Height = 132
	lstSelected.Left = 240
	lstSelected.Name = "lstSelected"
	lstSelected.Top = 0
	lstSelected.Width = 169
	lstSource.Height = 132
	lstSource.Left = 0
	lstSource.Name = "lstSource"
	lstSource.Top = 0
	lstSource.Width = 169
	
	PROCEDURE initmover		&& Perform initialization for the mover. This is done here instead of Init so params can be passed to form.
		LPARAMETERS lSortSource, lSortSelected, lUseMovers
		
		* Apply param values to lists
		IF TYPE('lSortSource') = "L"
			THIS.lstSource.Sorted = lSortSource
		ENDIF
		
		IF TYPE('lSortSelected') = "L"
			THIS.lstSelected.Sorted = lSortSelected
		ENDIF
		
		IF lSortSelected
			* movers don't make sense so turn 'em off
			THIS.lstSelected.MoverBars = .F.
		ELSE
			* pay attention to the parameter
			IF PCOUNT()>2 AND TYPE('lUseMovers') = "L"
				* default to .T., if omitted
				THIS.lstSelected.MoverBars = lUseMovers
			ENDIF
		ENDIF
		
			
	ENDPROC

ENDDEFINE
